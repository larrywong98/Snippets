#include "DES.h"

bitset<64> bs;
bitset<28> keybits1, keybits2;
bitset<32> bit[2],topalter,result,resultcopy;
bitset<48> extended, subkeys[16], data;


int main()
{
	DES des;
	string str = "Hellowxy";
	string key = "%g,E0f]~";
	bs = des.StringToBit(str.c_str());
	des.BitSeperate(bit[0], bit[1], bs);
	//cout << bit[tttt] << endl;
	//cout << bit[tttt] << endl;
	des.ParityDiscard(des.StringToBit(key.c_str()), keybits1, keybits2);
	des.GenerateKeys(keybits1, keybits2);
	for (int i = 0; i < 16; i++)
	{
		extended = des.ExtendDataBit(bit[i%2]);
		bitset<48> mixed=des.MixedBits(extended, subkeys[i]);
		topalter=des.STableAlter(mixed);
		result = des.PTableAlter(topalter);
		if (i == 14) resultcopy = result;
	}
	for (int i = 0; i < 32; i++)
	{
		bs[i] = result[i];
		bs[i + 32] = resultcopy[i];
	}
	bs=des.ipalter_1(bs);
	cout << bs << endl;
	system("pause");
	return 0;
}





#pragma once
#include<iostream>
#include<cstdlib>
#include<string>
#include<bitset>
using namespace std;


class DES
{
public:
	bitset<64> StringToBit(const char str[8]);
	void BitSeperate(bitset<32>& bs1, bitset<32>& bs2, bitset<64> bs);
	void ParityDiscard(bitset<64> tmp, bitset<28>& keybits1,bitset<28>& keybits2);
	void GenerateKeys(bitset<28>& keybits1, bitset<28>& keybits2);
	friend bitset<28> operator +(bitset<28> keybits1, bitset<28> keybits2);
	friend bitset<28> operator !(bitset<28> keybits);
	bitset<48> ExtendDataBit(bitset<32>& bs);
	friend bitset<48> operator ^(bitset<48> extended, bitset<48> subkey[16]);
	bitset<48> MixedBits(bitset<48> extended, bitset<48> subkey);
	bitset<32> STableAlter(bitset<48> mixed);
	bitset<32> PTableAlter(bitset<32> toptable);
	bitset<64> ipalter_1(bitset<64> ipalter);
//private:
//	static int ip[64];
//	static int pc1[56];
//	static int pc2[48];
//	static int shift[16];
//	static int e[48];
//	static int s_box[8][4][16];
//	static int p[32];
//	static int ip_1[64];
};













#include "DES.h"

extern bitset<48> subkeys[16];
int stemp = 0;
//³õÊ¼ipÖÃ»»±í
int ip[64] = { 58, 50, 42, 34, 26, 18, 10, 2,
60, 52, 44, 36, 28, 20, 12, 4,
62, 54, 46, 38, 30, 22, 14, 6,
64, 56, 48, 40, 32, 24, 16, 8,
57, 49, 41, 33, 25, 17, 9, 1,
59, 51, 43, 35, 27, 19, 11, 3,
61, 53, 45, 37, 29, 21, 13, 5,
63, 55, 47, 39, 31, 23, 15, 7 };

// ÃÜÔ¿ÖÃ»»±í 64-56Î»  
int pc1[56] = { 57, 49, 41, 33, 25, 17, 9,
1, 58, 50, 42, 34, 26, 18,
10, 2, 59, 51, 43, 35, 27,
19, 11, 3, 60, 52, 44, 36,
63, 55, 47, 39, 31, 23, 15,
7, 62, 54, 46, 38, 30, 22,
14, 6, 61, 53, 45, 37, 29,
21, 13, 5, 28, 20, 12, 4 };

// Ñ¹ËõÖÃ»» 56-48Î»×ÓÃÜÔ¿
int pc2[48] = { 14, 17, 11, 24, 1, 5,
3, 28, 15, 6, 21, 10,
23, 19, 12, 4, 26, 8,
16, 7, 27, 20, 13, 2,
41, 52, 31, 37, 47, 55,
30, 40, 51, 45, 33, 48,
44, 49, 39, 56, 34, 53,
46, 42, 50, 36, 29, 32 };

//left shift
int shift[16] = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

// À©Õ¹ÖÃ»»±í 32-48Î»  
int e[48] = { 32, 1, 2, 3, 4, 5,
4, 5, 6, 7, 8, 9,
8, 9, 10, 11, 12, 13,
12, 13, 14, 15, 16, 17,
16, 17, 18, 19, 20, 21,
20, 21, 22, 23, 24, 25,
24, 25, 26, 27, 28, 29,
28, 29, 30, 31, 32, 1 };

// 8¸öSºĞ 4x16µÄÖÃ»»±í 6-4Î» 1 6row 2 3 4 5col
int s_box[8][4][16] = {
	{
		{ 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7 },
		{ 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8 },
		{ 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0 },
		{ 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }
	},
	{
		{ 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10 },
		{ 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5 },
		{ 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15 },
		{ 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }
	},
	{
		{ 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8 },
		{ 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1 },
		{ 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7 },
		{ 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }
	},
	{
		{ 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15 },
		{ 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9 },
		{ 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4 },
		{ 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }
	},
	{
		{ 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9 },
		{ 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6 },
		{ 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14 },
		{ 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }
	},
	{
		{ 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11 },
		{ 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8 },
		{ 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6 },
		{ 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }
	},
	{
		{ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1 },
		{ 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6 },
		{ 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2 },
		{ 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }
	},
	{
		{ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7 },
		{ 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2 },
		{ 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8 },
		{ 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }
	}
};

// PÖÃ»»£¬32-32Î»  
int p[32] = { 16, 7, 20, 21,
29, 12, 28, 17,
1, 15, 23, 26,
5, 18, 31, 10,
2, 8, 24, 14,
32, 27, 3, 9,
19, 13, 30, 6,
22, 11, 4, 25 };

// Î²ipÖÃ»»±í  
int ip_1[64] = { 40, 8, 48, 16, 56, 24, 64, 32,
39, 7, 47, 15, 55, 23, 63, 31,
38, 6, 46, 14, 54, 22, 62, 30,
37, 5, 45, 13, 53, 21, 61, 29,
36, 4, 44, 12, 52, 20, 60, 28,
35, 3, 43, 11, 51, 19, 59, 27,
34, 2, 42, 10, 50, 18, 58, 26,
33, 1, 41, 9, 49, 17, 57, 25 };

bitset<64> DES::StringToBit(const char str[8])
{
	bitset<64> bs;
	for (int i = 0; i < 8;i++)
		for (int j = 0; j < 8; j++)
			bs[i * 8 + j] = (str[i] >> j) & 0x1;
	return bs;
}
void DES::BitSeperate(bitset<32>& bs1, bitset<32>& bs2,bitset<64> bs)
{
	for (int i = 0; i < 32; i++)
	{
		bs1[i] = bs[ip[i]-1];
		bs2[i] = bs[ip[32 + i]];
	}	
}
void DES::ParityDiscard(bitset<64> key, bitset<28>& keybits1,bitset<28>& keybits2)
{
	for (int i = 0; i < 28; i++)
	{
		keybits1[i] = key[pc1[i] - 1];
		keybits2[i] = key[pc1[28 + i]];
	}
}
bitset<28> operator +(bitset<28> keybits1, bitset<28> keybits2)
{
	bitset<28> keytmp;
	for (int i = 0; i < 28; i++)
		keytmp[i] = keybits1[i] + keybits2[i];
	return keytmp;
}
bitset<28> operator !(bitset<28> keybits)
{
	if (keybits != 0x0) return 0x0;
	if (keybits == 0x0) return 0x1;
	else return -1;
}

void DES::GenerateKeys(bitset<28>& keybits1, bitset<28>& keybits2)
{
	for (int i = 0; i < 16; i++)
	{
		bitset<56> tmpsubkey;
		if (1 == shift[i])
			keybits1 = (keybits1 << 0x1) + !(!(keybits1 >> 0x1b));
		if (2 == shift[i])
			keybits2 = (keybits2 << 0x3) + !(!(keybits2 >> 0x1a));
		for (int j = 0; j < 28; j++)
		{
			tmpsubkey[j] = keybits1[j];
			tmpsubkey[j + 28] = keybits2[j];
		}
		for (int j = 0; j < 48; j++)
			subkeys[i][j] = tmpsubkey[pc2[j] - 1];
	}
	//for (int i = 0; i < 16;i++)
	//	cout << subkeys[i] << endl;
}

bitset<48> DES::ExtendDataBit(bitset<32>& bs)
{
	bitset<48> extended;
	for (int i = 0; i < 48; i++)
		extended[i] = bs[e[i] - 1];
	return extended;
}

bitset<48> operator ^(bitset<48> extended, bitset<48> subkey[16])
{
	bitset<48> tmp;
	for (int j = 0; j < 48;j++)
		tmp[j] = extended[j] ^ subkey[stemp][j];
	return tmp;
}

bitset<48> DES::MixedBits(bitset<48> extended, bitset<48> subkey)
{
	bitset<48> mix=extended^subkey;
	stemp++;
	return mix;
}

bitset<32> DES::STableAlter(bitset<48> mixed)
{
	bitset<6> sep[8];
	bitset<2> tmp;
	bitset<4> tmp2;
	long tmpint1,tmpint2;
	bitset<4> after[8];
	for (int i = 0; i < 8; i++){
		for (int j = 0; j < 6; j++)
			sep[i][j] = mixed[i*6+j];
		tmp =( sep[i][0] << 1) + sep[i][5];
		tmp2 = (sep[i][1] << 3 )+ (sep[i][2] << 2 )+( sep[i][3] << 1) + sep[i][4];
		tmpint1 = tmp.to_ulong();
		tmpint2 = tmp2.to_ulong();
		bitset<4> choosebox(s_box[i][tmpint1 - 1][tmpint2 - 1]);
		after[i] = choosebox;
	}
	bitset<32> returnafter;
	for (int i = 0; i < 8;i++)
		for (int j = 0; j < 4; j++)
			returnafter[i * 4 + j] = after[i][j];
	return returnafter;
}
bitset<32> DES::PTableAlter(bitset<32> topalter)
{
	bitset<32> tmp;
	for (int i = 0; i < 32; i++)
		tmp[i] = topalter[p[i] - 1];
	return tmp;
}

bitset<64> DES::ipalter_1(bitset<64> ipalter)
{
	bitset<64> tmp;
	for (int i = 0; i < 64; i++)
	{
		tmp[i] = ipalter[ip_1[i] - 1];
	}
	return tmp;
}
